plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.11"
}

wrapper{
	gradleVersion = '8.3'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}


jacocoTestReport {
	reports {
		xml.required = true
		html.outputLocation = project.file('build/jacocoHtml')
	}
}


sonarqube {
	properties {
		property("sonar.projectKey", "dishdive")
		property("sonar.projectName", "dishdive")
		property("sonar.organization", "slobodan")
		property("sonar.host.url", "http://localhost:9000")
		property("sonar.token", "sqp_c75454f00d6e6b299741070041b586f45e61a9ed")
		property("sonar.qualitygate.wait", false)
		property "sonar.coverage.exclusions", "src/main/resources/**," +
				"src/main/java/dishdive/configuration/**," +
				"src/main/java/dishdive/controller/**," +
				"src/main/java/dishdive/dto/**," +
				"src/main/java/dishdive/persistence/**," +
				"src/main/java/dishdive/DishdiveApplication.java," +
				"src/main/java/dishdive/business/RecipeServiceInterface`," +
				"src/main/java/dishdive/business/RatingServiceInterface`," +
				"src/main/java/dishdive/business/ChefServiceInterface`," +
				"src/main/java/dishdive/business/exception/**/*`," +
				"src/main/java/dishdive/business/exception/InvalidAccessTokenException.java," +
				"src/main/java/dishdive/business/exception/NoUserFoundException.java," +
				"src/main/java/dishdive/business/exception/UnauthorizedDataAccessException.java," +
				"src/main/java/dishdive/business/annotation/**/*,"
	}
}

shadowJar {
	mergeServiceFiles()
	manifest {
		attributes 'Main-Class': 'dishdive.DishdiveApplication'
	}
}
